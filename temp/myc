#!/bin/sh

te=~/dotfiles/temp/te

get_couple() {
    couple_str=$(grep $bookmark" ## " $te)
    # splits #couple_str by ' ## ' into array
    local IFS=" ## "
    read -ra couple <<< $couple_str
}

# ask for confirmation
ask_conf() {
    action=$1
    if [ $action = "remove" ]; then
        present_participle="Removing"
    elif [ $action = "override" ]; then
        present_participle="Overriding"
    else
        echo "huh?"
        exit 1
    fi

    while :
    do
        read -p "Would you like to "$action" this bookmark? (Y/n) :  " answer
        case $answer in
            "Y")
                echo $present_participle" old [UNDESERVING] bookmark..."
                return 0
                ;;
            "n")
                echo "Aborting action..."
                return 1
                ;;
        esac
    done
}

m_add () {
    # Notes: $? gives exit code for last function run
    name=$1
    maybe_path=$2
    name_in_file=$(grep $name" ## " $te)

    # Checks if the bookmark name is in bookmark file. If so, ask to override
    if [ -n "$name_in_file" ]; then # If length of string is nonzero
        echo "This bookmark name already exists"
        echo "$name_in_file"
        ask_conf "override" && m_remove $name "-y" || return 1
    fi
  
    if [ -z "$maybe_path" ]; then # If empty string
        path=$PWD
    else
        temp_path=$PWD"/"$maybe_path # Making the path absolute
        # If path is a legit directory
        if [ -d "$temp_path" ]; then
            path=$temp_path
        elif [ -d "$maybe_path" ]; then # it's already an absolute file path
            path=$maybe_path
        else
            echo "$maybe_path"" does not exist or is not a directory."
            return 1
        fi
    fi
    
    echo $path" is now bookmarked to "$name
    echo $name" ## "$path >> $te
    return 0
}

m_remove() {
    # Notes: ^ indicates beginning of line
    #        $ indicates end of line
    rem_this=$1
    
    if [ -n "$(grep ^"$rem_this"" ## " $te)" ]; then # it is a bookmark name
        to_remove="/^$rem_this ## /d"
    elif [ -n "$(grep " ## ""$rem_this"$ $te)" ]; then # it is a file path
        to_remove="/ ## $rem_this$/d"
    else
        echo "$rem_this was not found in $te"
        return 1
    fi

    [ "$2" = "-y" ] || ask_conf "remove"
    if [ "$?" = 0 -o "$2" = "-y" ]; then
        # Actual action of removing
        sed -i "$to_remove" $te
    fi
}

go_to() {
    bookmark=$1

    # EXAMPLE: couple_str = "bookmark_name ## /path/to/book/mark"
    couple_str=$(grep ^"$bookmark"" ## " $te)
 
    # splits #couple_str by ' ## ' into array
    local IFS=' ## '

    # The below is an alternate way to get the same result
    # read -ra couple <<< $couple_str
    couple=( $couple_str )

    # Someday, figure out why it's [2] instead of [1]
    # and why [1] gives me an empty value or something like that
    go_path="${couple[2]}"

    if [ -d $go_path ]; then # If path is a legit directory
        cd "$go_path"
    elif [ -z $go_path ]; then # Pjth is no path! What a way to go
        echo "The bookmark, $bookmark, does not exist."
    else
        echo "$go_path does not exist."
    fi
}

list_all() {
    if [ "$1" = "-s" ]; then
        cat $te | sort
    else
        cat $te
    fi
}

myc() {
    case $1 in
        "-h")
            echo 'myc [bookmark_name] [path (or empty for cwd)]'
            ;;
        "add")
            m_add $2 $3
            ;;
        "rm")
            m_remove $2
            ;;
        "l")
            echo "Bookmarks:"
            list_all $2
            ;;
        "")
            echo "Got String?"
            ;;
        *)
            go_to $1
            ;;
    esac
}


#TODO:
# - clean up the -y in m_remove
# - change q l to q ls (better to avoid confusion)
# - -l to list directories right after cd-ing there
# - -f to find the path that a bookmark refers to
# - -v to open vim on the path that a bookmark refers to
# - -cv to change directory to the path and also open vim
# - tab completion!
# - have a thing to make the bookmark file
# getopts!
# rename to QUIRK!

